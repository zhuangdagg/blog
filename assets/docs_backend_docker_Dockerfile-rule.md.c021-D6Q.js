import{_ as o,c as a,a7 as r,o as c}from"./chunks/framework.DKOW1EBX.js";const h=JSON.parse('{"title":"Dockerfile","description":"","frontmatter":{},"headers":[],"relativePath":"docs/backend/docker/Dockerfile-rule.md","filePath":"docs/backend/docker/Dockerfile-rule.md","lastUpdated":1736738356000}'),t={name:"docs/backend/docker/Dockerfile-rule.md"};function l(d,e,i,s,n,k){return c(),a("div",null,e[0]||(e[0]=[r('<h1 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h1><hr><h3 id="dockerfile-支持的指令如下" tabindex="-1"><code>Dockerfile</code> 支持的指令如下： <a class="header-anchor" href="#dockerfile-支持的指令如下" aria-label="Permalink to &quot;`Dockerfile` 支持的指令如下：&quot;">​</a></h3><h4 id="expose" tabindex="-1"><code>EXPOSE</code> <a class="header-anchor" href="#expose" aria-label="Permalink to &quot;`EXPOSE`&quot;">​</a></h4><blockquote><p>EXPOSE 指令实际上不会发布端口。它充当构建映像的人员和运行容器的人员之间的一种文档，用于发布要发布的端口。</p></blockquote>',5)]))}const u=o(t,[["render",l]]);export{h as __pageData,u as default};
