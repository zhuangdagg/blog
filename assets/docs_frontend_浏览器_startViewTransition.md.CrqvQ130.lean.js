import{_ as n,c as i,a7 as t,o as s}from"./chunks/framework.DKOW1EBX.js";const u=JSON.parse('{"title":"View Transition API","description":"","frontmatter":{},"headers":[],"relativePath":"docs/frontend/浏览器/startViewTransition.md","filePath":"docs/frontend/浏览器/startViewTransition.md","lastUpdated":1740069390000}'),e={name:"docs/frontend/浏览器/startViewTransition.md"};function o(r,a,l,p,c,d){return s(),i("div",null,a[0]||(a[0]=[t(`<h1 id="view-transition-api" tabindex="-1">View Transition API <a class="header-anchor" href="#view-transition-api" aria-label="Permalink to &quot;View Transition API&quot;">​</a></h1><h2 id="视图过渡过程" tabindex="-1">视图过渡过程 <a class="header-anchor" href="#视图过渡过程" aria-label="Permalink to &quot;视图过渡过程&quot;">​</a></h2><ol><li>当调用 <code>document.startViewTransition(callback)</code> 时，API会截取当前页面的屏幕截图；</li><li>调用回调函数，即 <code>callback</code></li><li>API 会捕获页面的新状态并实时展示</li><li>API 构造了一个具有以下结构的伪元素树：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>::view-transition  // 视图过渡叠加层的根元素</span></span>
<span class="line"><span>└─ ::view-transition-group(root)</span></span>
<span class="line"><span>   └─ ::view-transition-image-pair(root)</span></span>
<span class="line"><span>      ├─ ::view-transition-old(root)  // 旧页面视图的屏幕截图</span></span>
<span class="line"><span>      └─ ::view-transition-new(root)  // 新页面视图的实时展示</span></span></code></pre></div><p><a href="/blog/js-playground.html#start-view-transition">使用示例</a></p>`,5)]))}const w=n(e,[["render",o]]);export{u as __pageData,w as default};
