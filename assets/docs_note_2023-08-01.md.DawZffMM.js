import{_ as i,c as a,a7 as t,o as e}from"./chunks/framework.DKOW1EBX.js";const c=JSON.parse('{"title":"2023-08-01","description":"","frontmatter":{},"headers":[],"relativePath":"docs/note/2023-08-01.md","filePath":"docs/note/2023-08-01.md","lastUpdated":1731383987000}'),n={name:"docs/note/2023-08-01.md"};function h(l,s,p,k,d,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="_2023-08-01" tabindex="-1">2023-08-01 <a class="header-anchor" href="#_2023-08-01" aria-label="Permalink to &quot;2023-08-01&quot;">​</a></h1><hr><h2 id="cocos-creator-api" tabindex="-1">cocos creator api <a class="header-anchor" href="#cocos-creator-api" aria-label="Permalink to &quot;cocos creator api&quot;">​</a></h2><ul><li>Method</li></ul><h3 id="instantiate" tabindex="-1"><code>instantiate</code> <a class="header-anchor" href="#instantiate" aria-label="Permalink to &quot;\`instantiate\`&quot;">​</a></h3><blockquote><p>动态克隆场景中的已有节点</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> director.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.target)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="destroy" tabindex="-1"><code>destroy</code> <a class="header-anchor" href="#destroy" aria-label="Permalink to &quot;\`destroy\`&quot;">​</a></h3><blockquote><p>通过 node.destroy() 函数，可以销毁节点。值得一提的是，销毁节点并不会立刻被移除，而是在当前帧逻辑更新结束后，统一执行</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.target.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // isValid 判断节点是否有效；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.target.isValid) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><blockquote><p><code>destroy</code>和<code>removeFormParent</code>区别 <code>removeFormParent：</code> 并不会从内存中释放，因为引擎内部仍会持有它的数据 <code>destroy：</code> 会在当前帧逻辑更新结束后，统一执行内存释放</p></blockquote>`,11)]))}const E=i(n,[["render",h]]);export{c as __pageData,E as default};
