import{_ as i,o as t,c as s,a7 as a}from"./chunks/framework.DKOW1EBX.js";const k=JSON.parse('{"title":"Object","description":"","frontmatter":{},"headers":[],"relativePath":"docs/frontend/obejct.md","filePath":"docs/frontend/obejct.md","lastUpdated":1727244124000}'),l={name:"docs/frontend/obejct.md"};function n(o,e,r,c,h,p){return t(),s("div",null,e[0]||(e[0]=[a(`<h1 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h1><h2 id="object-attribute" tabindex="-1">Object attribute <a class="header-anchor" href="#object-attribute" aria-label="Permalink to &quot;Object attribute&quot;">​</a></h2><h3 id="对象属性模型的相关方法" tabindex="-1">对象属性模型的相关方法 <a class="header-anchor" href="#对象属性模型的相关方法" aria-label="Permalink to &quot;对象属性模型的相关方法&quot;">​</a></h3><ul><li><code>Object.getOwnPropertyNames</code> 获取对象所以属性的键名（不包括原型上属性）</li><li><code>Object.getOwnPropertyDescriptor(obj: Object, key: String): { value: any, writable: boolean, enumerable: boolean, configurable: boolean }</code> 获取某个属性的描述对象</li><li><code>Object.defineProperty()</code> 通过描述对象，定义某个属性</li><li><code>Object.defineProperties()</code> 通过描述对象，定义多个属性</li></ul><h3 id="控制对象状态的方法" tabindex="-1">控制对象状态的方法 <a class="header-anchor" href="#控制对象状态的方法" aria-label="Permalink to &quot;控制对象状态的方法&quot;">​</a></h3><ul><li><code>Object.preventExtensions()</code>：防止对象扩展。</li><li><code>Object.isExtensible()</code>：判断对象是否可扩展。</li><li><code>Object.seal()</code>：禁止对象配置。</li><li><code>Object.isSealed()</code>：判断一个对象是否可配置。</li><li><code>Object.freeze()</code>：冻结一个对象。</li><li><code>Object.isFrozen()</code>：判断一个对象是否被冻结。</li></ul><h3 id="原型链相关方法" tabindex="-1">原型链相关方法 <a class="header-anchor" href="#原型链相关方法" aria-label="Permalink to &quot;原型链相关方法&quot;">​</a></h3><ul><li><code>Object.create()</code>：该方法可以指定原型对象和属性，返回一个新的对象。</li><li><code>Object.getPrototypeOf()</code>：获取对象的Prototype对象。</li><li><code>Object.setPrototypeOf(target:Object, prototype: Object)</code>：设置对象的原型。</li></ul><h3 id="object-实例方法" tabindex="-1">Object 实例方法 <a class="header-anchor" href="#object-实例方法" aria-label="Permalink to &quot;Object 实例方法&quot;">​</a></h3><ul><li>Object.prototype.valueOf()：返回当前对象对应的值。</li><li><code>Object.prototype.toString()</code>：返回当前对象对应的字符串形式。</li><li><code>Object.prototype.toLocaleString()</code>：返回当前对象对应的本地字符串形式(这个方法的主要作用是留出一个接口，让各种不同的对象实现自己版本的)。</li><li><code>Object.prototype.hasOwnProperty()</code>：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。</li><li><code>Object.prototype.isPrototypeOf()</code>：判断当前对象是否为另一个对象的原型。</li><li><code>Object.prototype.propertyIsEnumerable()</code>：判断某个属性是否可枚举。</li></ul><h3 id="object-拷贝" tabindex="-1">Object 拷贝 <a class="header-anchor" href="#object-拷贝" aria-label="Permalink to &quot;Object 拷贝&quot;">​</a></h3><blockquote><p>原型拷贝 <code>Object.create(obj.prototype)</code> 属性拷贝</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> copyPropertyDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOwnPropertyNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> desc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOwnPropertyDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source, key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, key, desc)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,13)]))}const b=i(l,[["render",n]]);export{k as __pageData,b as default};
