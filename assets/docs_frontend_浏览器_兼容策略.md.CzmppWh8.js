import{_ as a,c as e,a7 as i,o}from"./chunks/framework.DKOW1EBX.js";const p=JSON.parse('{"title":"浏览器兼容策略","description":"","frontmatter":{},"headers":[],"relativePath":"docs/frontend/浏览器/兼容策略.md","filePath":"docs/frontend/浏览器/兼容策略.md","lastUpdated":1734711086000}'),t={name:"docs/frontend/浏览器/兼容策略.md"};function r(s,l,n,c,d,u){return o(),e("div",null,l[0]||(l[0]=[i('<h1 id="浏览器兼容策略" tabindex="-1">浏览器兼容策略 <a class="header-anchor" href="#浏览器兼容策略" aria-label="Permalink to &quot;浏览器兼容策略&quot;">​</a></h1><h2 id="兼容策略" tabindex="-1">兼容策略 <a class="header-anchor" href="#兼容策略" aria-label="Permalink to &quot;兼容策略&quot;">​</a></h2><ul><li>渐进增强</li></ul><blockquote><p>渐进增强保证低版本浏览器的体验，对于支持新特性的新浏览器提供稍好的体验</p></blockquote><ul><li>优雅降级</li></ul><blockquote><p>现代浏览器提供最好的体验，而旧浏览器则退而求之次，保证大概的功能</p></blockquote><h2 id="兼容等级" tabindex="-1">兼容等级 <a class="header-anchor" href="#兼容等级" aria-label="Permalink to &quot;兼容等级&quot;">​</a></h2><ul><li>完全兼容</li><li>部分兼容</li><li>不兼容</li></ul><blockquote><p>一般而言, 根据浏览器市场分布情况、用户占比、开发成本等因素划分等级.</p></blockquote><h2 id="要不要做浏览器兼容" tabindex="-1">要不要做浏览器兼容 <a class="header-anchor" href="#要不要做浏览器兼容" aria-label="Permalink to &quot;要不要做浏览器兼容&quot;">​</a></h2><ol><li>从产品的角度：产品的受众、受众的浏览器比例、效果优先 还是基本功能优先。</li><li>成本的角度：有无必要做这个兼容</li></ol><h2 id="如何做浏览器兼容" tabindex="-1">如何做浏览器兼容 <a class="header-anchor" href="#如何做浏览器兼容" aria-label="Permalink to &quot;如何做浏览器兼容&quot;">​</a></h2><ol><li>根据兼容需求选择技术框架/库</li><li>根据兼容需求选择兼容工具 <ul><li>html5shiv</li><li>Respond.js</li><li>CSS Reset</li><li>normalize.css</li><li>Modernizr.js</li><li>postcss</li></ul></li><li>条件注释、 CSS Hack 、 js 能力检测做一些修补。Hack ： CSS 中， Hack 是指一种兼容 CSS 在不同浏览器中正确显示的技巧方法，修补 bug 的方法Filter ：表示过滤器的意思，它是一种对特定的浏览器或浏览器组显示或隐藏规则或声明的方法。本质上讲， Filter 是 hack 方法中的一种。</li><li><strong>渐进增强</strong>和<strong>优雅降级</strong></li></ol><ul><li>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</li><li>优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</li></ul>',14)]))}const b=a(t,[["render",r]]);export{p as __pageData,b as default};
