import{_ as a,o as i,c as e,a7 as t}from"./chunks/framework.DKOW1EBX.js";const c=JSON.parse('{"title":"2023-08-11","description":"","frontmatter":{},"headers":[],"relativePath":"docs/note/2023-08-11.md","filePath":"docs/note/2023-08-11.md","lastUpdated":1727243204000}'),n={name:"docs/note/2023-08-11.md"};function l(h,s,p,o,r,k){return i(),e("div",null,s[0]||(s[0]=[t(`<h1 id="_2023-08-11" tabindex="-1">2023-08-11 <a class="header-anchor" href="#_2023-08-11" aria-label="Permalink to &quot;2023-08-11&quot;">​</a></h1><hr><h2 id="htmltemplateelement" tabindex="-1">HTMLTemplateElement <a class="header-anchor" href="#htmltemplateelement" aria-label="Permalink to &quot;HTMLTemplateElement&quot;">​</a></h2><h2 id="documentfragment" tabindex="-1">DocumentFragment <a class="header-anchor" href="#documentfragment" aria-label="Permalink to &quot;DocumentFragment&quot;">​</a></h2><blockquote><p>使用片段的好处</p></blockquote><h2 id="ts-装饰器" tabindex="-1">TS 装饰器 <a class="header-anchor" href="#ts-装饰器" aria-label="Permalink to &quot;TS 装饰器&quot;">​</a></h2><blockquote><p><a href="https://juejin.cn/post/7006483808832716813" target="_blank" rel="noreferrer">参考</a></p></blockquote><ul><li>装饰器是一个函数，运行时被调用，<code>被装饰的声明信息</code>作为<code>参数</code>传入;</li><li>启动实验性的装饰器特性，需配置<code>tsconfig.json</code>中<code>experimentalDecorators: true</code></li><li>类型：<code>类装饰器</code>、<code>属性装饰器</code>、<code>方法装饰器</code> 和<code>参数装饰器</code></li><li>写法：普通装饰器（无法传参）、装饰器工厂</li></ul><h3 id="类装饰器" tabindex="-1">类装饰器 <a class="header-anchor" href="#类装饰器" aria-label="Permalink to &quot;类装饰器&quot;">​</a></h3><blockquote><p><code>类装饰器</code>在类声明之前声明（紧靠着类声明），用来<code>监视</code>、<code>修改</code>或者<code>替换</code>类定义</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleDecorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">targetClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // second run</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 666</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factoryDecorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">targetClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            target.Height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 198</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其次执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @simpleDecorator</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 先执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factoryDecorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h3 id="属性装饰器" tabindex="-1">属性装饰器 <a class="header-anchor" href="#属性装饰器" aria-label="Permalink to &quot;属性装饰器&quot;">​</a></h3><blockquote><p>装饰属性用 属性装饰器表达式会在运行时当做函数被调用，传入下列两个参数 第一个参数： 对于静态成员来说是<code>类的构造函数</code>，对于实例成员是类的<code>原型对象</code> 第二个参数： 是属性的名称</p></blockquote><h3 id="方法装饰器" tabindex="-1">方法装饰器 <a class="header-anchor" href="#方法装饰器" aria-label="Permalink to &quot;方法装饰器&quot;">​</a></h3><p>第一个参数： 对于静态成员来说是<code>类的构造函数</code>，对于实例成员是类的<code>原型对象</code> 第二个参数： 方法的名称 第三个参数： 方法的描述 修饰方法；</p><h3 id="参数装饰器" tabindex="-1">参数装饰器 <a class="header-anchor" href="#参数装饰器" aria-label="Permalink to &quot;参数装饰器&quot;">​</a></h3><p>第一个参数： 对于静态成员来说是<code>类的构造函数</code>，对于实例成员是类的<code>原型对象</code> 第二个参数： 成员的名字 第三个参数： 参数在函数参数列表中的<code>索引</code></p><h3 id="装饰器执行顺序" tabindex="-1">装饰器执行顺序 <a class="header-anchor" href="#装饰器执行顺序" aria-label="Permalink to &quot;装饰器执行顺序&quot;">​</a></h3><p>属性、方法先执行 -&gt; 由前往后执行 先参数 再到方法 最后是类（如果同类型，<code>先执行离类近</code>的）</p>`,19)]))}const E=a(n,[["render",l]]);export{c as __pageData,E as default};
