import{_ as i,c as a,a7 as l,o as e}from"./chunks/framework.DKOW1EBX.js";const t="/blog/assets/prototype_relate.B6a2z1Yh.png",g=JSON.parse('{"title":"查漏补缺","description":"","frontmatter":{},"headers":[],"relativePath":"docs/frontend/八股文/基础篇.md","filePath":"docs/frontend/八股文/基础篇.md","lastUpdated":1740069390000}'),n={name:"docs/frontend/八股文/基础篇.md"};function h(p,s,r,o,k,d){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="查漏补缺" tabindex="-1">查漏补缺 <a class="header-anchor" href="#查漏补缺" aria-label="Permalink to &quot;查漏补缺&quot;">​</a></h1><h2 id="什么是-包装类型" tabindex="-1">什么是 <strong>包装类型</strong> <a class="header-anchor" href="#什么是-包装类型" aria-label="Permalink to &quot;什么是 **包装类型**&quot;">​</a></h2><blockquote><p>在 JavaScript 中，<code>基本类型</code> 是没有 <code>属性</code> 和 <code>方法</code> 的，但是为了便于操 作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在 后台 <code>隐式</code> 地将基本类型的值转换为 <code>对象</code></p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3  String(str).length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;ABC&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 显式转换为包装类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// String {&quot;abc&quot;}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 包装类型转换为基本类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strObj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;abc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> falseObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Boolean {false}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">falseObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">falseObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">falseObj </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><h2 id="字符串转为数组" tabindex="-1">字符串转为数组 <a class="header-anchor" href="#字符串转为数组" aria-label="Permalink to &quot;字符串转为数组&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方法一 </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方法二 使用扩展运算符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span></span></code></pre></div><h2 id="proxy-实现功能" tabindex="-1">Proxy 实现功能 <a class="header-anchor" href="#proxy-实现功能" aria-label="Permalink to &quot;Proxy 实现功能&quot;">​</a></h2><ol><li>通过 Proxy 来实现一个数据响应式 <a href="/blog/js-playground.html#proxy-example" target="_blank">示例</a></li><li></li></ol><h2 id="json-parse-json-stringify-实现硬拷贝" tabindex="-1">JSON.parse(JSON.stringify(...)) 实现硬拷贝 <a class="header-anchor" href="#json-parse-json-stringify-实现硬拷贝" aria-label="Permalink to &quot;JSON.parse(JSON.stringify(...)) 实现硬拷贝&quot;">​</a></h2><p><a href="/blog/js-playground.html#parse-stringify-copy" target="_blank">示例</a></p><h2 id="原型与原型链相关" tabindex="-1">原型与原型链相关 <a class="header-anchor" href="#原型与原型链相关" aria-label="Permalink to &quot;原型与原型链相关&quot;">​</a></h2><ol><li>对象有__proto__属性，函数有__proto__属性，数组也有__proto__属性，只要是引用类型，就有__proto__属性，指向其原型。</li><li>只有函数有prototype属性，只有函数有prototype属性，只有函数有prototype属性，指向new操作符加调用该函数创建的对象实例的原型对象。</li></ol><p><img src="`+t+'" alt="alt" loading="lazy"></p><p><a href="https://segmentfault.com/a/1190000042725370" target="_blank" rel="noreferrer">查阅</a></p><p><code>Object.prototype.__proto__ === null</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><h2 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h2><blockquote><p>当前作用域中查找所需变量，但是该作用域没有这个变量，那这个 变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域 查找，依次向上级作用域查找，直到访问到window对象就被终止， 这一层层的关系就是作用域链。</p></blockquote><h2 id="对-this-的理解" tabindex="-1">对 <code>this</code> 的理解 <a class="header-anchor" href="#对-this-的理解" aria-label="Permalink to &quot;对 `this` 的理解&quot;">​</a></h2><blockquote><p>this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。 调用模式：</p></blockquote><ul><li><strong>函数调用</strong> 当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</li><li><strong>方法调用</strong> 如果一个函数作为一个对象的方法来调用时，this 指向这个对象</li><li><strong>构造器调用</strong> 如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</li><li><strong>apply,call,bind调用</strong></li></ul><p>四种模式优先级： <code>构造器</code> &gt; <code>apply,call,bind</code> &gt; <code>方法调用</code> &gt; <code>函数调用</code></p><h2 id="异步编程的实现方式" tabindex="-1">异步编程的实现方式 <a class="header-anchor" href="#异步编程的实现方式" aria-label="Permalink to &quot;异步编程的实现方式&quot;">​</a></h2><ul><li><code>回调函数</code> 缺点：callback hell</li><li><code>Promise</code> 链式调用，有时会造成多个 then 的链式调用，缺点：可能会造成代码的语义不够明确</li><li><code>generator</code>: co模块等方式来实现 generator 的自动执行；</li><li><code>async 函数</code>: async 函数是 generator 和 promise 实现的一个自动执行的语法糖</li></ul><h2 id="对象继承的方式" tabindex="-1">对象继承的方式 <a class="header-anchor" href="#对象继承的方式" aria-label="Permalink to &quot;对象继承的方式&quot;">​</a></h2><ol><li><p><strong>原型链继承</strong> 缺点：在包含有引用类型的数据时，会被所有的实例对象所共享， 容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传 递参数。</p></li><li><p><strong>构造函数</strong> 解决了不 能向超类型传递参数的缺点</p></li><li><p><strong>组合继承</strong></p></li><li><p><strong>原型式继承</strong> ES5中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同</p></li><li><p><strong>寄生式继承</strong></p></li><li><p><strong>寄生式组合继承</strong></p></li></ol><h2 id="内存缺漏" tabindex="-1">内存缺漏 <a class="header-anchor" href="#内存缺漏" aria-label="Permalink to &quot;内存缺漏&quot;">​</a></h2><ol><li>使用未声明的变量，意外创建了一个全局变量，使得变量一直留在内存中无法被回收</li><li>没停止的 <code>setInterval</code> 定时器； 循环函数引用了外部变量，导致该变量一直留在内存中，无法被回收</li><li>脱离 DOM 的引用：获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。</li><li>闭包：不合理的使用闭包，从而导致某些变量一直被留在内存当中。</li></ol><h2 id="强缓存和协商缓存" tabindex="-1">强缓存和协商缓存 <a class="header-anchor" href="#强缓存和协商缓存" aria-label="Permalink to &quot;强缓存和协商缓存&quot;">​</a></h2><p><a href="https://juejin.cn/post/6844903838768431118" target="_blank" rel="noreferrer">参考</a></p><p>http1.0 提供了 expires、last-modified/if-modified-since http1.1 提供了 cache-control、etag/if-none-match</p><p>cache-control：</p><ul><li>max-age： 设置资源被缓存多长时间，单位：s</li><li>s-maxage（秒</li><li>public：响应可被任何缓存区缓存，包括个人代理和代理服务器、</li><li>private：只能针对个人用户，而不能被代理服务器缓存</li><li>no-cache</li><li>no-store： 禁制一切缓存</li></ul><h2 id="事件代理" tabindex="-1">事件代理 <a class="header-anchor" href="#事件代理" aria-label="Permalink to &quot;事件代理&quot;">​</a></h2><blockquote><p>Event Delegation, 又称之为事件委托。“事件代理”即是把原本需要绑定的事件委托给⽗元素，让⽗元素担当事件监听的职务。事件代理的原理是DOM元素的事件冒泡。使⽤事件代理的好处是可以提⾼性能</p></blockquote><ul><li>可以节省内存占用，减少事件注册，例如：table上代理所以td的click事件。</li><li>可以实现新增子对象时无需再次对其绑定。</li></ul><h2 id="事件模型" tabindex="-1">事件模型 <a class="header-anchor" href="#事件模型" aria-label="Permalink to &quot;事件模型&quot;">​</a></h2><blockquote><p>W3C中定义事件的发生经历三个阶段： 捕获阶段、目标阶段和冒泡阶段；</p></blockquote><p>阻止冒泡： evt.stopPropagation(); 阻止捕获：阻止事件默认行为。 evt.preventDefault();</p><h2 id="内存泄漏" tabindex="-1">内存泄漏 <a class="header-anchor" href="#内存泄漏" aria-label="Permalink to &quot;内存泄漏&quot;">​</a></h2><ul><li>内存泄漏指任何对象在不再拥有或需要之后仍然存在</li><li>setTimeout 第⼀个参数使⽤字符串⽽⾮函数的话，会引发内存泄漏</li><li>闭包使用不当</li></ul><h2 id="js-定义对象的方法" tabindex="-1">js 定义对象的方法 <a class="header-anchor" href="#js-定义对象的方法" aria-label="Permalink to &quot;js 定义对象的方法&quot;">​</a></h2><ol><li>对象字面量： <code>let obj = {};</code></li><li>构造函数：<code>let obj = new Object();</code></li><li>Object.create(): <code>let obj = Object.create(Object.prototype);</code></li></ol><h2 id="promise" tabindex="-1">promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;promise&quot;">​</a></h2><ul><li>Promise/A+ 定义，Promise 四种状态：pending, settled(fulfilled, rejected)</li></ul>',45)]))}const E=i(n,[["render",h]]);export{g as __pageData,E as default};
