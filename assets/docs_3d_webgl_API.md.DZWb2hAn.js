import{_ as a,c as i,a7 as n,o as l}from"./chunks/framework.DKOW1EBX.js";const e="/blog/assets/webgl_draw_arrays.CIQPo2gr.png",c=JSON.parse('{"title":"接口","description":"","frontmatter":{},"headers":[],"relativePath":"docs/3d/webgl/API.md","filePath":"docs/3d/webgl/API.md","lastUpdated":1740069390000}'),t={name:"docs/3d/webgl/API.md"};function p(h,s,r,k,d,g){return l(),i("div",null,s[0]||(s[0]=[n(`<h1 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h1><h2 id="webglrenderingcontext-webgl1渲染上下文" tabindex="-1"><code>WebGLRenderingContext</code> webgl1渲染上下文 <a class="header-anchor" href="#webglrenderingcontext-webgl1渲染上下文" aria-label="Permalink to &quot;\`WebGLRenderingContext\` webgl1渲染上下文&quot;">​</a></h2><h3 id="gl-drawarrays-从数组数据渲染图元-参考" tabindex="-1"><code>gl.drawArrays</code> 从数组数据渲染图元 <a href="https://juejin.cn/post/6992934014411620365" target="_blank" rel="noreferrer">参考</a> <a class="header-anchor" href="#gl-drawarrays-从数组数据渲染图元-参考" aria-label="Permalink to &quot;\`gl.drawArrays\` 从数组数据渲染图元 [参考](https://juejin.cn/post/6992934014411620365)&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DrawMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    POINTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: gl.POINTS, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示绘制一系列的点，分别绘制在v0,v1,v2处</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    LINES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: gl.LINES, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示绘制一系列单独的线段，分别绘制在(v0,v1),(v2,v3),(v4,v5)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    LINE_STRIP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: gl.LINE_STRIP, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示绘制一系列连续的线段，(v0,v1),(v1,v2),(v2,v3)...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    LINE_LOOP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: gl.LINE_LOOP, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示绘制一个闭环的线段，(v0,v1),(v1,v2),(v2,v3)...(vn,v0)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    TRIANGLES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: gl.TRIANGLES, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示绘制一系列单独的三角形，三角形的三个点分别是(v0,v1,v2),(v3,v4,v5)...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    TRIANGLE_STRIP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: gl.TRIANGLE_STRIP, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  表示绘制一系列相连接的三角形(v0,v1,v2),(v2,v1,v3),(v2,v3,v4)...（注意点的顺序保持一致）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    TRIANGLE_FAN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: gl.TRIANGLE_FAN, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示绘制一个以v0为圆心的扇形(v0,v1,v2),(v0,v2,v3),(v0,v3,v4)...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@params</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> first {number} 指定从哪个顶点开始绘制，这个参数决定了上面v0,v1,v2的调用起点，假如first值为1，则从v1开始往后算。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@params</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> count {number} 指定绘制需要用到多少个顶点，即有多少个顶点参与绘制，多余的会被忽略。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mode: DrawMode, first: number, count: number)</span></span></code></pre></div><p><img src="`+e+'" alt="" loading="lazy"></p><div class="tip custom-block github-alert"><p class="custom-block-title">提示</p><p>threejs &gt; WebGLBufferRenderer &gt; render</p></div>',6)]))}const v=a(t,[["render",p]]);export{c as __pageData,v as default};
