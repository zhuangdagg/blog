import{_ as a,o as i,c as l,a7 as s}from"./chunks/framework.DKOW1EBX.js";const k=JSON.parse('{"title":"2023-06-27","description":"","frontmatter":{},"headers":[],"relativePath":"docs/note/2023-06-27.md","filePath":"docs/note/2023-06-27.md","lastUpdated":1727243204000}'),o={name:"docs/note/2023-06-27.md"};function t(d,e,n,r,h,p){return i(),l("div",null,e[0]||(e[0]=[s(`<h1 id="_2023-06-27" tabindex="-1">2023-06-27 <a class="header-anchor" href="#_2023-06-27" aria-label="Permalink to &quot;2023-06-27&quot;">​</a></h1><hr><h3 id="glob" tabindex="-1">Glob <a class="header-anchor" href="#glob" aria-label="Permalink to &quot;Glob&quot;">​</a></h3><blockquote><p><code>glob</code> 是由普通字符和/或通配字符组成的字符串，用于匹配文件路径。可以利用一个或多个 glob 在文件系统中定位文件</p></blockquote><ul><li>特殊字符 <ul><li><code>*</code></li><li><code>**</code></li><li><code>！</code></li></ul></li></ul><h3 id="动态查找" tabindex="-1">动态查找 <a class="header-anchor" href="#动态查找" aria-label="Permalink to &quot;动态查找&quot;">​</a></h3><h4 id="当导入路径不是相对路径时-模块解析将会模仿-node-模块解析策略-下面我将给出一个简单例子" tabindex="-1">当导入路径不是相对路径时，模块解析将会模仿 <a href="https://nodejs.org/api/modules.html#modules_all_together" target="_blank" rel="noreferrer">Node 模块解析策略</a>，下面我将给出一个简单例子： <a class="header-anchor" href="#当导入路径不是相对路径时-模块解析将会模仿-node-模块解析策略-下面我将给出一个简单例子" aria-label="Permalink to &quot;当导入路径不是相对路径时，模块解析将会模仿 [Node 模块解析策略](https://nodejs.org/api/modules.html#modules_all_together)，下面我将给出一个简单例子：&quot;">​</a></h4><ul><li><p>当使用 <code>import * as foo from &#39;foo&#39;</code>, 将会按如下顺序查找模块：</p><ul><li><code>./node_modules/foo</code></li><li><code>../node_modules/foo</code></li><li><code>../../node_modules/foo</code></li><li>直到系统的根目录</li></ul></li><li><p>place 检查：</p><ul><li>if <code>foo.ts</code></li><li>elif <code>foo/index.ts</code></li><li>elif <code>foo/foo/package.json -&gt; types</code></li><li>else <code>foo/foo/package.json -&gt; main</code></li></ul></li></ul><br><ul><li><code>JavaScript</code> 赋值运算符返回的值是被赋予的值</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><hr><blockquote><p><a href="https://www.gulpjs.com.cn/docs/getting-started/explaining-globs/" target="_blank" rel="noreferrer">gulp glob详解</a></p></blockquote>`,13)]))}const u=a(o,[["render",t]]);export{k as __pageData,u as default};
