import{_ as o,c,a7 as t,o as a}from"./chunks/framework.DKOW1EBX.js";const b=JSON.parse('{"title":"2023-08-31","description":"","frontmatter":{},"headers":[],"relativePath":"docs/note/2023-08-31.md","filePath":"docs/note/2023-08-31.md","lastUpdated":1736905510000}'),d={name:"docs/note/2023-08-31.md"};function l(i,e,r,s,n,u){return a(),c("div",null,e[0]||(e[0]=[t('<h1 id="_2023-08-31" tabindex="-1">2023-08-31 <a class="header-anchor" href="#_2023-08-31" aria-label="Permalink to &quot;2023-08-31&quot;">​</a></h1><hr><h2 id="behavior-tree" tabindex="-1">behavior tree <a class="header-anchor" href="#behavior-tree" aria-label="Permalink to &quot;behavior tree&quot;">​</a></h2><blockquote><p><code>tick</code> : 行为树结点的一次触发称为一次 tick，会返回成功(<code>success</code>)，失败(<code>failure</code>)，运行中(<code>running</code>)的状态信息给它的<code>父结点</code>。</p></blockquote><blockquote><p><code>执行结点</code>： 动作结点 、 条件结点</p></blockquote><blockquote><p><code>控制结点</code> control node :</p></blockquote><ul><li><code>Sequence</code> - 顺序 <blockquote><p>按<code>顺序执行</code>子结点直到其中<code>一个子结点返回失败状态</code>或<code>所有子结点返回成功状态</code>。</p></blockquote></li><li><code>Fallback</code> - 备选 <blockquote><p>按<code>顺序执行</code>子结点直到其中一个孩子结点返回成功状态或所有孩子结点返回失败状态。一般用来实现角色的备选行为。</p></blockquote></li><li><code>Parallel</code> - 并行 <blockquote><p><code>并行执行</code>所有子结点。直到至少 M(1 &lt;= M &lt;= N)个子结点返回成功状态或所有孩子结点返回失败状态</p></blockquote></li><li><code>Decorator</code> - 装饰 <blockquote><p>以自定义的方式修改孩子结点的行为。 eg: 反转其孩子结点返回的状态信息</p></blockquote></li></ul><h3 id="显式成功条件-explicit-success-condition" tabindex="-1">显式成功条件(explicit success condition) <a class="header-anchor" href="#显式成功条件-explicit-success-condition" aria-label="Permalink to &quot;显式成功条件(explicit success condition)&quot;">​</a></h3><blockquote><p>行为树的一个很常用的设计规则就是使用显式成功条件(explicit success condition)。简单来说，就是在执行动作前总是先进行条件检测。</p></blockquote>',9)]))}const k=o(d,[["render",l]]);export{b as __pageData,k as default};
